function cellInfo = vvbusindrvcmd(varargin) 
% VVBUSINDRVCMD returns a cell array containing bus object information 
% 
% Optional Input: 'false' will suppress a call to Simulink.Bus.cellToObject 
%                 when the MATLAB file is executed. 
% The order of bus element attributes is as follows:
%   ElementName, Dimensions, DataType, Complexity, SamplingMode, DimensionsMode, Min, Max, DocUnits, Description 

suppressObject = false; 
if nargin == 1 && islogical(varargin{1}) && varargin{1} == false 
    suppressObject = true; 
elseif nargin > 1 
    error('Invalid input argument(s) encountered'); 
end 

cellInfo = { ... 
  { ... 
    'VVCDrvCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'SteerCmd', 1, 'Bus: VVCSteerCmdAng', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'AccelCmd', 1, 'Bus: VVCAccelCmd', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'DecelCmd', 1, 'Bus: VVCDecelCmd', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'TransCmd', 1, 'Bus: VVCTransCmd', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'LightsCmd', 1, 'Bus: VVCLightsCmd', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'UserCmd', 1, 'Bus: VVCUser', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'IgnModeCmd', 1, 'int8', 'real', 'Sample', 'Fixed', [], [], sprintf('one'), ''}; ...
    } ...
  } ...
  { ... 
    'VVCAccelCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'EnblAccelCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model accel commands with user specified inputs')}; ...
{'AccelCmd', 1, 'double', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Normalized accelerator input')}; ...
{'AccelHld', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to hold the current driver model accel output when true')}; ...
{'AccelZero', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model accel commands with zero when value is true')}; ...
    } ...
  } ...
  { ... 
    'VVCDecelCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'EnblDecelCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model decel commands with user specified inputs')}; ...
{'DecelCmd', 1, 'double', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Normalized footpedal decelerator or brake input')}; ...
{'DecelHld', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to hold the current driver model decel output when true')}; ...
{'DecelZero', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model decel commands with zero when value is true')}; ...
{'HndBrkCmd', 1, 'double', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Normalized handbrake / park brake input')}; ...
    } ...
  } ...
  { ... 
    'VVCLightsCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'HighBeamCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'LowBeamCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'BrakeLightCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'ReverseLightCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'LeftSignalCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'RightSignalCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'FrntFogCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'RearFogCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'TailLightCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'HazzardCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'UserCmd', 1, 'Bus: VVCUser', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
  { ... 
    'VVCSteerCmdAng', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'EnblSteerCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model steering commands with user specified inputs')}; ...
{'SteerCmd', 1, 'double', 'real', 'Sample', 'Fixed', [], [], sprintf('rad'), sprintf('Normalized handwheel input (steering column).')}; ...
{'SteerHld', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to hold the current driver model steering output when true')}; ...
{'SteerZero', 1, 'boolean', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Boolean signal used to override driver model steering commands with zero when value is true')}; ...
    } ...
  } ...
  { ... 
    'VVCTransCmd', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'TransModeCmd', 1, 'int8', 'real', 'Sample', 'Fixed', [], [], sprintf('one'), sprintf('Used to spec the mode of operation for the transmission (manual, automatic, sport, econ, etc)')}; ...
{'GearCmd', 1, 'int8', 'real', 'Sample', 'Fixed', [], [], sprintf('one'), sprintf('Gear input (could be PRNDL or manual gear numbers) depending on mode of TransModeCmd')}; ...
{'UpShiftCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], sprintf('one'), ''}; ...
{'DwnShiftCmd', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], sprintf('one'), ''}; ...
{'ClutchCmd', 1, 'double', 'real', 'Sample', 'Fixed', 0, 1, sprintf('one'), sprintf('Normalized footpedal clutch input')}; ...
    } ...
  } ...
  { ... 
    'VVCUser', ... 
    '', ... 
    '', ... 
    'Auto', ... 
    '-1', ... 
    '0', {... 
{'UserDblCmd1', 1, 'double', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'UserInt8Cmd1', 1, 'int8', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'UserUint8Cmd1', 1, 'uint8', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
{'UserBoolCmd1', 1, 'boolean', 'real', 'Sample', 'Fixed', [], [], '', ''}; ...
    } ...
  } ...
}'; 

if ~suppressObject 
    % Create bus objects in the MATLAB base workspace 
    Simulink.Bus.cellToObject(cellInfo) 
end 
